{"version":3,"sources":["map.js","App.js","serviceWorker.js","index.js"],"names":["position","map","location","undefined","console","log","Map","center","zoom","className","TileLayer","url","attribution","Marker","Popup","sendLocation","e","lat","lon","preventDefault","App","usePosition","latitude","longitude","timestamp","accuracy","error","onClick","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"wQAIIA,EAAW,CAAC,QAAS,KAsBVC,MArBf,YAAyB,IAAXC,EAAU,EAAVA,SAKd,YAJuBC,IAAhBD,EAAS,QAAmCC,IAAhBD,EAAS,KACpCE,QAAQC,IAAIH,EAAS,GAAIA,EAAS,IAClCF,EAAWE,GAGjB,kBAACI,EAAA,EAAD,CAAKC,OAAQP,EAAUQ,KAAM,GAAIC,UAAU,OAClCL,QAAQC,IAAIH,GACZE,QAAQC,IAAIL,GACnB,kBAACU,EAAA,EAAD,CACEC,IAAI,qDACJC,YAAY,2EAEb,kBAACC,EAAA,EAAD,CAAQb,SAAUA,GACf,kBAACc,EAAA,EAAD,6BACyB,6BADzB,4B,QCJR,IAAMC,EAAe,SAACC,EAAGC,EAAKC,GAC5BF,EAAEG,iBACFf,QAAQC,IAAI,QAASY,EAAK,IAAKC,IAGlBE,EAff,WAAgB,IAAD,EAC+CC,wBAApDC,EADK,EACLA,SAAUC,EADL,EACKA,UAClB,OAFa,EACgBC,UADhB,EAC2BC,SAD3B,EACqCC,MAEhD,yBAAKjB,UAAU,OACX,kBAAC,EAAD,CAAKP,SAAU,CAACoB,EAAUC,KAC1B,4BAAQI,QAAS,SAACX,GAAD,OAAOD,EAAaC,EAAGM,EAAUC,IAAYd,UAAU,OAAxE,6BCEFmB,EAAcC,QACW,cAA7BC,OAAO5B,SAAS6B,UAEe,UAA7BD,OAAO5B,SAAS6B,UAEhBD,OAAO5B,SAAS6B,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1B1C,QAAQC,IACN,iHAKE8B,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlBpC,QAAQC,IAAI,sCAGR8B,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAAAvB,GACLtB,QAAQsB,MAAM,4CAA6CA,MC1FjEwB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,GAAwBzB,OAAO5B,SAASsD,MACpDC,SAAW3B,OAAO5B,SAASuD,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMqB,GAAN,sBAEP3B,IAgEV,SAAiCM,EAAOC,GAEtCwB,MAAMzB,GACHK,MAAK,SAAAqB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAM3B,MAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,MAAK,WAC7BT,OAAO5B,SAASkE,eAKpBnC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACL7C,QAAQC,IACN,oEArFAgE,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAM3B,MAAK,WACjCnC,QAAQC,IACN,iHAMJ4B,EAAgBC,EAAOC,OCvC/BE,K","file":"static/js/main.b110baff.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet'\r\n\r\n\r\nlet position = [51.505, -0.09];\r\nfunction map({location}){\r\n    if(location[0] !== undefined & location[1] !== undefined){\r\n        console.log(location[0], location[1]);\r\n        position = location;\r\n    }\r\nreturn(\r\n  <Map center={position} zoom={14} className='map'>\r\n          {console.log(location)}\r\n          {console.log(position)}\r\n    <TileLayer\r\n      url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n      attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n    />\r\n     <Marker position={position}>\r\n        <Popup>\r\n            A pretty CSS3 popup. <br /> Easily customizable.\r\n        </Popup>\r\n    </Marker>\r\n  </Map>\r\n)}\r\n\r\nexport default map;","import React from 'react';\nimport './App.css';\nimport Map from './map';\nimport { usePosition } from 'use-position';\n\nfunction App() {\n  const { latitude, longitude, timestamp, accuracy, error } = usePosition();\n  return (\n    <div className=\"App\">\n        <Map location={[latitude, longitude]}/>\n        <button onClick={(e) => sendLocation(e, latitude, longitude)} className=\"btn\">Wy≈õlij lokalizacje</button>\n    </div>\n  );\n}\n\nconst sendLocation = (e, lat, lon) => {\n  e.preventDefault();\n  console.log('teest', lat, '|', lon)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}